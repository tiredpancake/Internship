"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.noProvenanceError = void 0;
exports.ensurePackageHasProvenance = ensurePackageHasProvenance;
exports.getNxPackageGroup = getNxPackageGroup;
const child_process_1 = require("child_process");
const path_1 = require("path");
const util_1 = require("util");
const fileutils_1 = require("./fileutils");
/*
 * Verifies that the given npm package has provenance attestations
 * generated by the GitHub Actions workflow at .github/workflows/publish.yml
 * in the nrwl/nx repository.
 *
 * Will throw if the package does not have valid provenance.
 */
async function ensurePackageHasProvenance(packageName, packageVersion) {
    // this is used for locally released versions without provenance
    // do not set this for other reasons or you might be exposed to security risks
    if (process.env.NX_SKIP_PROVENANCE_CHECK) {
        return;
    }
    const execFileAsync = (0, util_1.promisify)(child_process_1.execFile);
    const npmViewResult = JSON.parse((await execFileAsync('npm', ['view', `${packageName}@${packageVersion}`, '--json', '--silent'], {
        timeout: 20000,
    })).stdout.trim());
    const attURL = npmViewResult.dist?.attestations?.url;
    if (!attURL)
        throw (0, exports.noProvenanceError)(packageName, packageVersion, 'No attestation URL found');
    const attestations = (await (await fetch(attURL)).json());
    const provenanceAttestation = attestations?.attestations?.find((a) => a.predicateType === 'https://slsa.dev/provenance/v1');
    if (!provenanceAttestation)
        throw (0, exports.noProvenanceError)(packageName, packageVersion, 'No provenance attestation found');
    const dsseEnvelopePayload = JSON.parse(Buffer.from(provenanceAttestation.bundle.dsseEnvelope.payload, 'base64').toString());
    const workflowParameters = dsseEnvelopePayload?.predicate?.buildDefinition?.externalParameters
        ?.workflow;
    // verify that provenance was actually generated from the right publishing workflow
    if (workflowParameters?.repository !== 'https://github.com/nrwl/nx') {
        throw (0, exports.noProvenanceError)(packageName, packageVersion, 'Repository does not match nrwl/nx');
    }
    if (workflowParameters?.path !== '.github/workflows/publish.yml') {
        throw (0, exports.noProvenanceError)(packageName, packageVersion, 'Publishing workflow does not match .github/workflows/publish.yml');
    }
    if (workflowParameters?.ref !== `refs/tags/${npmViewResult.version}`) {
        throw (0, exports.noProvenanceError)(packageName, packageVersion, `Version ref does not match refs/tags/${npmViewResult.version}`);
    }
    // verify that provenance was generated from the exact same artifact as the one we are installing
    const distSha = Buffer.from(npmViewResult.dist.integrity.replace('sha512-', ''), 'base64').toString('hex');
    const attestationSha = dsseEnvelopePayload?.subject[0]?.digest.sha512;
    if (distSha !== attestationSha) {
        throw (0, exports.noProvenanceError)(packageName, packageVersion, 'Integrity hash does not match attestation hash');
    }
    return;
}
const noProvenanceError = (packageName, packageVersion, error) => `An error occurred while checking the provenance of ${packageName}@${packageVersion}. This could indicate a security risk. Please double check https://www.npmjs.com/package/${packageName} to see if the package is published correctly or file an issue at https://github.com/nrwl/nx/issues \n Error: ${error ?? ''}`;
exports.noProvenanceError = noProvenanceError;
function getNxPackageGroup() {
    const packageJsonPath = (0, path_1.join)(__dirname, '../../package.json');
    const packageJson = (0, fileutils_1.readJsonFile)(packageJsonPath);
    const packages = packageJson['nx-migrations'].packageGroup.filter((dep) => typeof dep === 'string' && dep.startsWith('@nx/'));
    packages.push('nx');
    return packages;
}
